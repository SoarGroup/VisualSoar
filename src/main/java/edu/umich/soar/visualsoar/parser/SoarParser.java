/* Generated By:JavaCC: Do not edit this line. SoarParser.java */
package edu.umich.soar.visualsoar.parser;
import java.util.*;
/**
	@author Brad Jones
	if you are looking at the java file, it isn't going to make a lot of sense
	I used the Java Compiler Compiler to make the lexer and parser
	the homepage is http://www.metamata.com
*/
public class SoarParser implements SoarParserConstants {

  final public Vector VisualSoarFile() throws ParseException {
    Vector vec = new Vector();
    SoarProduction sp;
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      if (jj_2_2(3)) {
        sp = soarProduction();
          vec.add(sp);
      } else if (jj_2_3(3)) {
        jj_consume_token(SOARCMD);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
                {if (true) return vec;}
    throw new Error("Missing return statement in function");
  }

  final public SoarProduction soarProduction() throws ParseException {
        SoarProduction sp = new SoarProduction();
        ConditionSide cs;
        ActionSide as;
        Token t;
        String s;
    if (jj_2_4(3)) {
      jj_consume_token(SP);
    } else if (jj_2_5(3)) {
      jj_consume_token(GP);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_6(3)) {
      jj_consume_token(LBRACE);
    } else if (jj_2_7(3)) {
      jj_consume_token(QUOTE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    // its name	
            t = jj_consume_token(SYMBOLIC_CONST);
            sp.setName(t.image);
                sp.setStartLine(t.beginLine);
    handleDocumentationQuote(sp);
    label_2:
    while (true) {
      if (jj_2_8(3)) {
        ;
      } else {
        break label_2;
      }
      s = productionType();
                                sp.setProductionType(s);
    }
    cs = conditionSide();
          sp.setConditionSide(cs);
    jj_consume_token(RARROW);
    as = actionSide();
          sp.setActionSide(as);
    if (jj_2_9(3)) {
      jj_consume_token(RBRACE);
    } else if (jj_2_10(3)) {
      jj_consume_token(QUOTE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        token_source.SwitchTo(DEFAULT);  //No longer "IN_SOAR_PRODUCTION"
        {if (true) return sp;}
    throw new Error("Missing return statement in function");
  }

  final public String productionType() throws ParseException {
        Token t;
    t = jj_consume_token(PRODTYPE);
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  void handleDocumentationQuote(SoarProduction sp) throws ParseException {
        Token tok = getToken(1);
        if(tok.kind == QUOTE) {
                getNextToken();
                while(getToken(1).kind != QUOTE) {
                        getNextToken();
                }
                getNextToken();
        }
        sp.setComment("");
  }

/////////////////////////////////////////////////////////////
// The LHS of the production
/*
	The grammar that this recognizes
	<ConditionSide> 			::= <Condition>+
	<FirstCondition>			::= '(' "state" VARIABLE <AttributeValueTest>* ')' 
	<Condition>					::= ['-'] PositiveCondition
	<PositiveCondition>	    	::= <ConditionForOneIdentifier>
									| '{' <Condition>+ '}'
	<ConditionForOneIdentifier>	::= '(' VARIABLE <AttributeValueTest>* ')'
	<AttributeValueTest>		::= ['-'] ^ <AttributeTest> ['.'<AttributeTest>]* <ValueTest>* 
	<AttributeTest>				::= <Test>
	<ValueTest>					::= <Test> ['+']
	<Test> 						::= <ConjunctiveTest> | <SimpleTest>
	<ConjunctiveTest>			::= '{' <SimpleTest>+ '}'
	<SimpleTest>				::= <DisjunctionTest> | <RelationalTest>
	<DisjunctionTest>			::= '<<' <Constant>+ '>>'
	<RelationalTest>            ::=	 [<Relation>] <SingleTest>	
	<Relation>					::=  '<>' | '<=>' | '<' | '<=' | '>=' | '>' | '='
	<SingleTest>				::= <Constant> | VARIABLE
	<Constant> 					::= INTEGER_CONST | SYMBOLIC_CONST | FLOATING_POINT_CONST	
*/

// Ok
  final public ConditionSide conditionSide() throws ParseException {
        Condition cond;
        ConditionSide retValue = new ConditionSide();
    label_3:
    while (true) {
      cond = condition();
                if(cond != null)
                        retValue.add(cond);
      if (jj_2_11(3)) {
        ;
      } else {
        break label_3;
      }
    }
          {if (true) return retValue;}
    throw new Error("Missing return statement in function");
  }

// Ok
  final public Condition condition() throws ParseException {
        boolean negated = false;
        PositiveCondition pcond;
    if (jj_2_12(3)) {
      jj_consume_token(HYPHEN);
                    negated = true;
    } else {
      ;
    }
    pcond = positiveCondition();
          {if (true) return new Condition(negated,pcond);}
    throw new Error("Missing return statement in function");
  }

// Ok
  final public PositiveCondition positiveCondition() throws ParseException {
        ConditionForOneIdentifier cfoi;
        Condition cond;
        PositiveCondition retVal;
    if (jj_2_14(3)) {
      cfoi = conditionForOneIdentifier();
                {if (true) return new PositiveCondition(cfoi);}
    } else if (jj_2_15(3)) {
      jj_consume_token(LBRACE);
                        retVal = new PositiveCondition();
      label_4:
      while (true) {
        cond = condition();
                        retVal.add(cond);
        if (jj_2_13(3)) {
          ;
        } else {
          break label_4;
        }
      }
      jj_consume_token(RBRACE);
          {if (true) return retVal;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Ok
  final public ConditionForOneIdentifier conditionForOneIdentifier() throws ParseException {
        Token t;
        AttributeValueTest avt;
        ConditionForOneIdentifier cfoi;
        boolean hasState = false;
    jj_consume_token(LPAREN);
    if (jj_2_16(3)) {
      t = jj_consume_token(SYMBOLIC_CONST);
                if(t.image.equals("state"))
                        hasState = true;
                else
                        {if (true) throw new ParseException("only state allowed.");}
    } else {
      ;
    }
    t = jj_consume_token(VARIABLE);
                cfoi = new ConditionForOneIdentifier(hasState,new Pair(t.image,t.beginLine));
    label_5:
    while (true) {
      if (jj_2_17(3)) {
        ;
      } else {
        break label_5;
      }
      avt = attributeValueTest();
                cfoi.add(avt);
    }
    jj_consume_token(RPAREN);
          {if (true) return cfoi;}
    throw new Error("Missing return statement in function");
  }

// Ok
  final public AttributeValueTest attributeValueTest() throws ParseException {
        AttributeValueTest avt = new AttributeValueTest();
        AttributeTest at;
        ValueTest vt;
    if (jj_2_18(3)) {
      jj_consume_token(HYPHEN);
                avt.negate();
    } else {
      ;
    }
    jj_consume_token(CARET);
    at = attributeTest();
          avt.add(at);
    label_6:
    while (true) {
      if (jj_2_19(3)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(PERIOD);
      at = attributeTest();
                                         avt.add(at);
    }
    label_7:
    while (true) {
      if (jj_2_20(3)) {
        ;
      } else {
        break label_7;
      }
      vt = valueTest();
                            avt.add(vt);
    }
          {if (true) return avt;}
    throw new Error("Missing return statement in function");
  }

// Ok
  final public AttributeTest attributeTest() throws ParseException {
        Test t;
    t = test();
          {if (true) return new AttributeTest(t);}
    throw new Error("Missing return statement in function");
  }

// Ok
  final public ValueTest valueTest() throws ParseException {
        ValueTest vt;
        Test t;
    t = test();
                vt = new ValueTest(t);
    if (jj_2_21(3)) {
      jj_consume_token(PLUS);
                vt.acceptablePreference();
    } else {
      ;
    }
            {if (true) return vt;}
    throw new Error("Missing return statement in function");
  }

// Ok
  final public Test test() throws ParseException {
        ConjunctiveTest ct;
        SimpleTest st;
    if (jj_2_22(3)) {
      ct = conjunctiveTest();
          {if (true) return new Test(ct);}
    } else if (jj_2_23(3)) {
      st = simpleTest();
          {if (true) return new Test(st);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Ok
  final public ConjunctiveTest conjunctiveTest() throws ParseException {
        ConjunctiveTest retVal = new ConjunctiveTest();
        SimpleTest st;
    jj_consume_token(LBRACE);
    label_8:
    while (true) {
      st = simpleTest();
          retVal.add(st);
      if (jj_2_24(3)) {
        ;
      } else {
        break label_8;
      }
    }
    jj_consume_token(RBRACE);
          {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

// Ok
  final public SimpleTest simpleTest() throws ParseException {
        DisjunctionTest dt;
        RelationalTest rt;
    if (jj_2_25(3)) {
      dt = disjunctionTest();
           {if (true) return new SimpleTest(dt);}
    } else if (jj_2_26(3)) {
      rt = relationalTest();
           {if (true) return new SimpleTest(rt);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Ok
  final public DisjunctionTest disjunctionTest() throws ParseException {
        DisjunctionTest dt = new DisjunctionTest();
        Constant c;
    if (jj_2_27(3)) {
      jj_consume_token(LDISJUNCT);
    } else if (jj_2_28(3)) {
      jj_consume_token(LSQBRACKET);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_9:
    while (true) {
      c = constant();
                           dt.add(c);
      if (jj_2_29(3)) {
        ;
      } else {
        break label_9;
      }
    }
    if (jj_2_30(3)) {
      jj_consume_token(RDISJUNCT);
    } else if (jj_2_31(3)) {
      jj_consume_token(RSQBRACKET);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return dt;}
    throw new Error("Missing return statement in function");
  }

// Ok
  final public RelationalTest relationalTest() throws ParseException {
        int r = RelationalTest.EQ;
        SingleTest st;
    if (jj_2_32(3)) {
      r = relation();
    } else {
      ;
    }
    st = singleTest();
                {if (true) return new RelationalTest(r,st);}
    throw new Error("Missing return statement in function");
  }

// Ok
  final public int relation() throws ParseException {
    if (jj_2_33(3)) {
      jj_consume_token(NEQUAL);
                {if (true) return RelationalTest.NEQ;}
    } else if (jj_2_34(3)) {
      jj_consume_token(SAME_TYPE);
                {if (true) return RelationalTest.EQUIV;}
    } else if (jj_2_35(3)) {
      jj_consume_token(LESS);
                {if (true) return RelationalTest.LT;}
    } else if (jj_2_36(3)) {
      jj_consume_token(LEQUAL);
                {if (true) return RelationalTest.LTE;}
    } else if (jj_2_37(3)) {
      jj_consume_token(GEQUAL);
                {if (true) return RelationalTest.GTE;}
    } else if (jj_2_38(3)) {
      jj_consume_token(GREATER);
                {if (true) return RelationalTest.GT;}
    } else if (jj_2_39(3)) {
      jj_consume_token(EQUAL);
                {if (true) return RelationalTest.EQ;}
    } else if (jj_2_40(3)) {
      jj_consume_token(ATSIGN);
                {if (true) return RelationalTest.AT;}
    } else if (jj_2_41(3)) {
      jj_consume_token(ATPLUS);
                {if (true) return RelationalTest.ATPLUS;}
    } else if (jj_2_42(3)) {
      jj_consume_token(ATMINUS);
                {if (true) return RelationalTest.ATMINUS;}
    } else if (jj_2_43(3)) {
      jj_consume_token(BANGAT);
                {if (true) return RelationalTest.BANGAT;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Ok
  final public SingleTest singleTest() throws ParseException {
        Token t;
        Constant c;
    if (jj_2_44(3)) {
      t = jj_consume_token(VARIABLE);
                {if (true) return new SingleTest(new Pair(t.image,t.beginLine));}
    } else if (jj_2_45(3)) {
      c = constant();
                {if (true) return new SingleTest(c);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Ok
  final public Constant constant() throws ParseException {
        Token t;
    if (jj_2_46(3)) {
      t = jj_consume_token(INTEGER_CONST);
                try {
                        {if (true) return new Constant(Integer.parseInt(t.image),t.beginLine);}
                }
                catch(NumberFormatException nfe) {
                        {if (true) return new Constant(t.image,t.beginLine);}
                }
    } else if (jj_2_47(3)) {
      t = jj_consume_token(SYMBOLIC_CONST);
                {if (true) return new Constant(t.image,t.beginLine);}
    } else if (jj_2_48(3)) {
      t = jj_consume_token(FLOATING_POINT_CONST);
                try {
                        {if (true) return new Constant(Float.parseFloat(t.image),t.beginLine);}
                }
                catch(NumberFormatException nfe) {
                        {if (true) return new Constant(t.image,t.beginLine);}
                }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////
// Action Side
/* =====================================================================

   Grammar for right hand sides of productions

   <ActionSide> ::= <Action>*
   <Action> ::= <VarAttrValMake> | <FunctionCall> | TCL_PREPROCESS
   <VarAttrValMake> ::= ( VARIABLE <AttributeValueMake>+ )
   <FunctionCall> ::= ( <FunctionName> (TCL_PREPROCESS | <RHSValue>)* )
   <FunctionName> ::= SYMBOLIC_CONST | + | -
     (WARNING: might need others besides +, - here if the lexer changes)
   <RHSValue> ::= <Constant> | <FunctionCall> | VARIABLE
   <Constant> ::= SYMBOLIC_CONST | INTEGER_CONST | FLOATING_POINT_CONST
   <AttributeValueMake> ::= ^ <RHSValue> ['.'<RHSValue>]* <ValueMake>+
   <ValueMake> ::= <RHSValue> <Preferences>

   <Preferences> ::= <PreferenceSpecifier>*   
   <PreferenceSpecifier> ::= <NaturallyUnaryPreference> [,]
                            | <ForcedUnaryPreference>
                            | <BinaryPreference> <RHSValue> [,]
   <NaturallyUnaryPreference> ::= + | - | ! | ~ 
   <BinaryPreference> ::= > | = | < 
   <ForcedUnaryPreference> ::= <BinaryPreference> [,]   
===================================================================== */

// Done
  final public ActionSide actionSide() throws ParseException {
        ActionSide retVal = new ActionSide();
        Action a;
    label_10:
    while (true) {
      if (jj_2_49(3)) {
        ;
      } else {
        break label_10;
      }
      a = action();
                if(a != null)
                        retVal.add(a);
    }
         {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

// Ok
  final public Action action() throws ParseException {
        Token t;
        VarAttrValMake vavm;
        FunctionCall fc;
    if (jj_2_50(3)) {
      vavm = varAttrValMake();
                {if (true) return new Action(vavm);}
    } else if (jj_2_51(3)) {
      fc = functionCall();
                {if (true) return new Action(fc);}
    } else if (jj_2_52(3)) {
      jj_consume_token(TCL_PREPROCESS);
                {if (true) return null;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Ok
  final public VarAttrValMake varAttrValMake() throws ParseException {
        Token t;
        VarAttrValMake retVal;
        AttributeValueMake avm;
    jj_consume_token(LPAREN);
    t = jj_consume_token(VARIABLE);
          retVal = new VarAttrValMake(new Pair(t.image,t.beginLine));
    label_11:
    while (true) {
      avm = attributeValueMake();
                                      retVal.add(avm);
      if (jj_2_53(3)) {
        ;
      } else {
        break label_11;
      }
    }
    jj_consume_token(RPAREN);
          {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

// Ok
  final public FunctionCall functionCall() throws ParseException {
        Pair funcName;
        FunctionCall funcCall;
        RHSValue rhsv;
    jj_consume_token(LPAREN);
    funcName = functionName();
                                     funcCall = new FunctionCall(funcName);
    label_12:
    while (true) {
      if (jj_2_54(3)) {
        ;
      } else {
        break label_12;
      }
      if (jj_2_55(3)) {
        rhsv = rhsValue();
                            funcCall.add(rhsv);
      } else if (jj_2_56(3)) {
        jj_consume_token(TCL_PREPROCESS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
          {if (true) return funcCall;}
    throw new Error("Missing return statement in function");
  }

// Ok
  final public Pair functionName() throws ParseException {
        Token t;
    if (jj_2_57(3)) {
      t = jj_consume_token(SYMBOLIC_CONST);
                {if (true) return new Pair(t.image,t.beginLine);}
    } else if (jj_2_58(3)) {
      t = jj_consume_token(PLUS);
                {if (true) return new Pair(t.image,t.beginLine);}
    } else if (jj_2_59(3)) {
      t = jj_consume_token(HYPHEN);
                {if (true) return new Pair(t.image,t.beginLine);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Ok
  final public RHSValue rhsValue() throws ParseException {
        Token t;
        Constant c;
        FunctionCall fc;
    if (jj_2_60(3)) {
      c = constant();
                {if (true) return new RHSValue(c);}
    } else if (jj_2_61(3)) {
      fc = functionCall();
                {if (true) return new RHSValue(fc);}
    } else if (jj_2_62(3)) {
      t = jj_consume_token(VARIABLE);
                {if (true) return new RHSValue(new Pair(t.image,t.beginLine));}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Ok
  final public AttributeValueMake attributeValueMake() throws ParseException {
        AttributeValueMake avm = new AttributeValueMake();
        RHSValue rhsv;
        ValueMake vm;
    jj_consume_token(CARET);
    rhsv = rhsValue();
          avm.add(rhsv);
    label_13:
    while (true) {
      if (jj_2_63(3)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(PERIOD);
      rhsv = rhsValue();
                                      avm.add(rhsv);
    }
    label_14:
    while (true) {
      vm = valueMake();
                             avm.add(vm);
      if (jj_2_64(3)) {
        ;
      } else {
        break label_14;
      }
    }
         {if (true) return avm;}
    throw new Error("Missing return statement in function");
  }

// Ok 
  final public ValueMake valueMake() throws ParseException {
        PreferenceSpecifier ps;
        RHSValue rhsv;
        ValueMake vm;
    rhsv = rhsValue();
          vm = new ValueMake(rhsv);
    label_15:
    while (true) {
      if (jj_2_65(3)) {
        ;
      } else {
        break label_15;
      }
      ps = preferenceSpecifier();
                  vm.add(ps);
    }
          {if (true) return vm;}
    throw new Error("Missing return statement in function");
  }

// Ok
  final public PreferenceSpecifier preferenceSpecifier() throws ParseException {
        int type;
        PreferenceSpecifier ps;
        RHSValue rhs;
    if (jj_2_68(3)) {
      ps = naturallyUnaryPreference();
      if (jj_2_66(3)) {
        jj_consume_token(COMMA);
      } else {
        ;
      }
          {if (true) return ps;}
    } else if (jj_2_69(3)) {
      ps = forcedUnaryPreference();
          {if (true) return ps;}
    } else if (jj_2_70(3)) {
      type = binaryPreference();
      rhs = rhsValue();
      if (jj_2_67(3)) {
        jj_consume_token(COMMA);
      } else {
        ;
      }
          {if (true) return new BinaryPreference(type,rhs);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Ok
  final public NaturallyUnaryPreference naturallyUnaryPreference() throws ParseException {
    if (jj_2_71(3)) {
      jj_consume_token(PLUS);
          {if (true) return new NaturallyUnaryPreference(NaturallyUnaryPreference.ACCEPTABLE);}
    } else if (jj_2_72(3)) {
      jj_consume_token(HYPHEN);
          {if (true) return new NaturallyUnaryPreference(NaturallyUnaryPreference.REJECT);}
    } else if (jj_2_73(3)) {
      jj_consume_token(EMARK);
          {if (true) return new NaturallyUnaryPreference(NaturallyUnaryPreference.REQUIRE);}
    } else if (jj_2_74(3)) {
      jj_consume_token(TILDE);
          {if (true) return new NaturallyUnaryPreference(NaturallyUnaryPreference.PROHIBIT);}
    } else if (jj_2_75(3)) {
      jj_consume_token(ATSIGN);
          {if (true) return new NaturallyUnaryPreference(NaturallyUnaryPreference.ATSIGN);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Ok
  final public int binaryPreference() throws ParseException {
    if (jj_2_76(3)) {
      jj_consume_token(GREATER);
          {if (true) return BinaryPreference.GREATER;}
    } else if (jj_2_77(3)) {
      jj_consume_token(EQUAL);
          {if (true) return BinaryPreference.EQUAL;}
    } else if (jj_2_78(3)) {
      jj_consume_token(LESS);
          {if (true) return BinaryPreference.LESS;}
    } else if (jj_2_79(3)) {
      jj_consume_token(AMPERSAND);
          {if (true) return BinaryPreference.AMPERSAND;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Ok
  final public ForcedUnaryPreference forcedUnaryPreference() throws ParseException {
        int type;
    type = binaryPreference();
    if (jj_2_80(3)) {
      jj_consume_token(COMMA);
    } else {
      ;
    }
          {if (true) return new ForcedUnaryPreference(type);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    if (jj_3_53()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_80() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(PRODTYPE)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(QUOTE)) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(TCL_PREPROCESS)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(QUOTE)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(GP)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_80()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(SP)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    if (jj_scan_token(SYMBOLIC_CONST)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_scan_token(AMPERSAND)) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_76() {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(SOARCMD)) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_scan_token(ATSIGN)) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_scan_token(EMARK)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(PERIOD)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(HYPHEN)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_71() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(HYPHEN)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    if (jj_scan_token(CARET)) return true;
    if (jj_3R_21()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_70() {
    if (jj_3R_38()) return true;
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(FLOATING_POINT_CONST)) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(SYMBOLIC_CONST)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_68() {
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_66()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(INTEGER_CONST)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(SYMBOLIC_CONST)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    if (jj_scan_token(VARIABLE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_65()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_scan_token(PERIOD)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(CARET)) return true;
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_63()) { jj_scanpos = xsp; break; }
    }
    if (jj_3_64()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(BANGAT)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3_13()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(ATMINUS)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(ATPLUS)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(ATSIGN)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(GEQUAL)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(HYPHEN)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(LEQUAL)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(SAME_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(NEQUAL)) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(HYPHEN)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(RSQBRACKET)) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(LSQBRACKET)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(SYMBOLIC_CONST)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(RDISJUNCT)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(TCL_PREPROCESS)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(LDISJUNCT)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    if (jj_3_29()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    return false;
  }

  private boolean jj_3_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) return true;
    }
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_54()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_32()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SoarParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[80];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SoarParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SoarParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SoarParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SoarParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SoarParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SoarParser(SoarParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SoarParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 80; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                         }
